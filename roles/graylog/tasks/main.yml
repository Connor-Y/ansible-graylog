---

- name: Add the OpenJDK PPA
  apt_repository:
    repo: 'ppa:openjdk-r/ppa'
    state: present

- name: Install packages and dependencies
  apt: name={{ item }} update_cache={{ update_apt_cache }} state=installed
  with_items:
    - apt-transport-https
    - openjdk-8-jre-headless
    - uuid-runtime

# --- mongoDB ---

- name: Install Pip via Package
  apt: name=python3-pip update_cache={{ update_apt_cache }} state=installed
  tags:
    - mongodb

- name: Install PyMongo from PIP
  pip: name=pymongo state=present
  tags:
    - mongodb

- name: Install Pip via Package
  apt: name=python3-pip update_cache={{ update_apt_cache }} state=installed
  tags:
    - mongodb

- name: Install PyMongo from PIP
  pip: name=pymongo state=present
  tags:
    - mongodb

- block:
    - name: Import mongodb-org gpg public signing key | python version > 2.7.6
      apt_key:
        url: "{{ mongodb_signing_key_url }}"
        state: present
      when: ansible_python_version|version_compare('2.7.6', '>')

    - name: Add mongodb-org apt repository to sources.list
      apt_repository:
        repo: "{{ mongodb_apt_repo }}"
        update_cache: yes
        state: present

  #  - name: Add MongoDB Repo
   #   apt_repository: repo='deb http://repo.mongodb.org/apt/ubuntu {{ansible_distribution_release}}/mongodb-org/3.4 multiverse' state=present

    - name: Create MongoDB Configuration
      template:
        src: mongod.conf.j2
        dest: /etc/mongod.conf
        owner: root
        group: root
        mode: 0644
      notify: restart mongodb

    - name: Install Mongodb Packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: "{{ update_apt_cache }} "
      with_items: "{{ mongodb_packages }}"

    - name: Add Mongodb Directories
      file:
        state: directory
        path: "{{ item }}"
        owner: "{{ mongodb_user }}"
        group: "{{ mongodb_group }}"
        mode: 0755
      with_items:
        - "{{ mongodb_dbpath }}"
        - "{{ mongodb_logpath | dirname }}"
      notify: restart mongodb

    - name: Ensure mongodb service is running and enabled on boot
      service:
        name: "{{ mongodb_service_name }}"
        enabled: yes
        state: started

    - name: Check where admin user already exists
      command: >
        mongo --quiet -u {{ mongodb_user_admin_name }} \
              -p {{ mongodb_user_admin_password }} --port {{ mongodb_port }} --eval 'db.version()' admin
      register: mongodb_user_admin_check
      changed_when: false
      check_mode: no
      ignore_errors: true
      when: ( mongodb_authorization_enabled == true )
      no_log: true
      tags:
        - mongodb

    # Visit <https://docs.mongodb.com/manual/reference/built-in-roles/> for role information, non-supported roles by ansible mobodb_user must be wrapped in quotes.
    - name: Setup MongoDB User for Admin DB
      mongodb_user:
        database: admin
        name: "{{ mongodb_user_admin_name }}"
        password: "{{ mongodb_user_admin_password }}"
        roles: "root"
        state: present
      when: ( mongodb_authorization_enabled and mongodb_user_admin_check.rc != 0 )
      tags:
        - mongodb

    - name: Setup MongoDB User for Graylog DB
      mongodb_user:
        database: graylog
        login_database: "admin"
        login_user: "{{ mongodb_user_admin_name }}"
        login_password: "{{ mongodb_user_admin_password }}"
        name: "{{ mongodb_graylog_username }}"
        password: "{{ mongodb_graylog_password }}"
        roles: "dbOwner"
        state: present
      when: ( mongodb_authorization_enabled and mongodb_user_admin_check.rc != 0 )
      tags:
        - mongodb

    - meta: flush_handlers
  become: true
  become_method: sudo
  tags:
    - mongodb

# Suggested not to use the default ubuntu package but instead retrieve directly from mongo-org.
# - name: Install MongoDB
#   apt: name=mongodb-server state=installed

# --- ElasticSearch ---

- name: Add the ElasticSearch public GPG key to the apt repo
  apt_key: url=https://packages.elastic.co/GPG-KEY-elasticsearch
           state=present

- name: Add ElasticSearch to the trusted sources list
  apt_repository:
    repo: deb https://packages.elastic.co/elasticsearch/2.x/debian stable main
    state: present

- name: Install ElasticSearch
  apt: name=elasticsearch state=present

- name: Copy the ElasticSearch configuration file
  template: src=elasticsearch.yml.j2 dest=/etc/elasticsearch/elasticsearch.yml owner=root group=elasticsearch mode=0750 force=yes
  notify: restart elasticsearch

# --- Graylog ---

- name: Download the Graylog repository package
  get_url:
    url: 'https://packages.graylog2.org/repo/packages/graylog-2.2-repository_latest.deb'
    dest: '/tmp/graylog_repository.deb'

- name: Install the Graylog repository package
  apt:
    deb: '/tmp/graylog_repository.deb'
    state: present
    dpkg_options: 'force-all'
  register: install_repo

- name: Install Graylog
  apt: name=graylog-server update_cache={{ update_apt_cache }} state=installed

- name: Copy the Graylog configuration file
  template: src=graylog.server.conf.j2 dest=/etc/graylog/server/server.conf owner=root group=root mode=0644 force=yes
  notify: restart graylog
